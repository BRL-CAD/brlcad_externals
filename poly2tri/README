This is a modification of https://github.com/jhasse/poly2tri

In many ways this really should be embedded in BRL-CAD as part of libbg - we
need to use a non-vanilla version of poly2tri because it gives better results
when facetizing our BRep faces, but libbg does have an API that this should
be hiding behind.  If we can achieve that than we can just embed our custom
poly2tri - however, right now libbrep also uses poly2tri directly for its
fast facetize routine (it skips watertight processing logic, but it is also
MUCH faster and is the default draw -m1 visualization for NURBS.)  Because
its use in libbrep is performance critical, any move to migrate the logic there
to use libbg's API instead will have to be done very carefully.

It's not immediately clear how hard it would be to functionally test for a
poly2tri we can use - the upstream "succeeds" in the sense that it runs, but
its outputs are unsatisfactory.  If we didn't need to use us poly2tri as a
library in two places right now this would be a slam-dunk for embedding,
but since we do we're more or less stuck with this as an external until we
can sort out getting it properly under libbg.

Because a system version is both unsuitable and not (necessarily) trivial to
test for, we simply force this on regardless.
