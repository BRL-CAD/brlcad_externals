diff -Naur lmdb.orig/CMakeLists.txt lmdb/CMakeLists.txt
--- lmdb.orig/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ lmdb/CMakeLists.txt	2023-09-11 11:49:22.384002631 -0400
@@ -0,0 +1,91 @@
+#                     C M A K E L I S T S . T X T
+# BRL-CAD
+#
+# Copyright (c) 2022 United States Government as represented by
+# the U.S. Army Research Laboratory.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above
+# copyright notice, this list of conditions and the following
+# disclaimer in the documentation and/or other materials provided
+# with the distribution.
+#
+# 3. The name of the author may not be used to endorse or promote
+# products derived from this software without specific prior written
+# permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
+# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Build file for lmdb (above license applies to only this file - lmdb is
+# covered by its own license.)
+#
+# Lightning Memory-Mapped Database files from https://github.com/LMDB/lmdb
+###
+
+# Minimum required version of CMake
+cmake_minimum_required(VERSION 3.18)
+
+# Set CMake project name
+project(LMDB)
+
+include_directories(
+  ${CMAKE_CURRENT_SOURCE_DIR}
+  )
+
+if (NOT DEFINED BIN_DIR)
+  set (BIN_DIR bin)
+endif (NOT DEFINED BIN_DIR)
+
+if (NOT DEFINED LIB_DIR)
+  set (LIB_DIR lib)
+endif (NOT DEFINED LIB_DIR)
+
+if (NOT DEFINED INCLUDE_DIR)
+  set (INCLUDE_DIR include)
+endif (NOT DEFINED INCLUDE_DIR)
+
+find_package(Threads)
+
+set(LMDB_SOURCES
+  mdb.c
+  midl.c
+  )
+
+add_library(lmdb SHARED ${LMDB_SOURCES})
+target_link_libraries(lmdb PRIVATE Threads::Threads)
+set_property(TARGET lmdb APPEND PROPERTY COMPILE_DEFINITIONS "LMDB_DLL_EXPORTS")
+set_property(TARGET lmdb APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS "LMDB_DLL_IMPORTS")
+install(TARGETS lmdb
+  RUNTIME DESTINATION ${BIN_DIR}
+  LIBRARY DESTINATION ${LIB_DIR}
+  ARCHIVE DESTINATION ${LIB_DIR}
+  )
+
+set(LMDB_HDRS
+  lmdb.h
+  midl.h
+  )
+install(FILES ${LMDB_HDRS} DESTINATION ${INCLUDE_DIR}/lmdb)
+
+# Local Variables:
+# tab-width: 8
+# mode: cmake
+# indent-tabs-mode: t
+# End:
+# ex: shiftwidth=2 tabstop=8
diff -Naur lmdb.orig/lmdb.h lmdb/lmdb.h
--- lmdb.orig/lmdb.h	2023-09-11 11:45:32.163923736 -0400
+++ lmdb/lmdb.h	2023-09-11 11:48:19.953119455 -0400
@@ -170,6 +170,28 @@
 #include <inttypes.h>
 #include <limits.h>
 
+#ifndef COMPILER_DLLEXPORT
+# if defined(_WIN32)
+#  define COMPILER_DLLEXPORT __declspec(dllexport)
+#  define COMPILER_DLLIMPORT __declspec(dllimport)
+# else
+#  define COMPILER_DLLEXPORT __attribute__ ((visibility ("default")))
+#  define COMPILER_DLLIMPORT __attribute__ ((visibility ("default")))
+# endif
+#endif
+
+#ifndef LMDB_EXPORT
+#  if defined(LMDB_DLL_EXPORTS) && defined(LMDB_DLL_IMPORTS)
+#    error "Only LMDB_DLL_EXPORTS or LMDB_DLL_IMPORTS can be defined, not both."
+#  elif defined(LMDB_DLL_EXPORTS)
+#    define LMDB_EXPORT COMPILER_DLLEXPORT
+#  elif defined(LMDB_DLL_IMPORTS)
+#    define LMDB_EXPORT COMPILER_DLLIMPORT
+#  else
+#    define LMDB_EXPORT
+#  endif
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -514,7 +536,7 @@
 	 * @param[out] patch if non-NULL, the library patch version number is copied here
 	 * @retval "version string" The library version as a string
 	 */
-char *mdb_version(int *major, int *minor, int *patch);
+LMDB_EXPORT char *mdb_version(int *major, int *minor, int *patch);
 
 	/** @brief Return a string describing a given error code.
 	 *
@@ -526,7 +548,7 @@
 	 * @param[in] err The error code
 	 * @retval "error message" The description of the error
 	 */
-char *mdb_strerror(int err);
+LMDB_EXPORT char *mdb_strerror(int err);
 
 	/** @brief Create an LMDB environment handle.
 	 *
@@ -539,7 +561,7 @@
 	 * @param[out] env The address where the new handle will be stored
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_create(MDB_env **env);
+LMDB_EXPORT int  mdb_env_create(MDB_env **env);
 
 	/** @brief Open an environment handle.
 	 *
@@ -668,7 +690,7 @@
 	 *	<li>EAGAIN - the environment was locked by another process.
 	 * </ul>
 	 */
-int  mdb_env_open(MDB_env *env, const char *path, unsigned int flags, mdb_mode_t mode);
+LMDB_EXPORT int  mdb_env_open(MDB_env *env, const char *path, unsigned int flags, mdb_mode_t mode);
 
 	/** @brief Copy an LMDB environment to the specified path.
 	 *
@@ -684,7 +706,7 @@
 	 * empty.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_copy(MDB_env *env, const char *path);
+LMDB_EXPORT int  mdb_env_copy(MDB_env *env, const char *path);
 
 	/** @brief Copy an LMDB environment to the specified file descriptor.
 	 *
@@ -699,7 +721,7 @@
 	 * have already been opened for Write access.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_copyfd(MDB_env *env, mdb_filehandle_t fd);
+LMDB_EXPORT int  mdb_env_copyfd(MDB_env *env, mdb_filehandle_t fd);
 
 	/** @brief Copy an LMDB environment to the specified path, with options.
 	 *
@@ -724,7 +746,7 @@
 	 * </ul>
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_copy2(MDB_env *env, const char *path, unsigned int flags);
+LMDB_EXPORT int  mdb_env_copy2(MDB_env *env, const char *path, unsigned int flags);
 
 	/** @brief Copy an LMDB environment to the specified file descriptor,
 	 *	with options.
@@ -743,7 +765,7 @@
 	 * See #mdb_env_copy2() for options.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_copyfd2(MDB_env *env, mdb_filehandle_t fd, unsigned int flags);
+LMDB_EXPORT int  mdb_env_copyfd2(MDB_env *env, mdb_filehandle_t fd, unsigned int flags);
 
 	/** @brief Return statistics about the LMDB environment.
 	 *
@@ -751,7 +773,7 @@
 	 * @param[out] stat The address of an #MDB_stat structure
 	 * 	where the statistics will be copied
 	 */
-int  mdb_env_stat(MDB_env *env, MDB_stat *stat);
+LMDB_EXPORT int  mdb_env_stat(MDB_env *env, MDB_stat *stat);
 
 	/** @brief Return information about the LMDB environment.
 	 *
@@ -759,7 +781,7 @@
 	 * @param[out] stat The address of an #MDB_envinfo structure
 	 * 	where the information will be copied
 	 */
-int  mdb_env_info(MDB_env *env, MDB_envinfo *stat);
+LMDB_EXPORT int  mdb_env_info(MDB_env *env, MDB_envinfo *stat);
 
 	/** @brief Flush the data buffers to disk.
 	 *
@@ -780,7 +802,7 @@
 	 *	<li>EIO - an error occurred during synchronization.
 	 * </ul>
 	 */
-int  mdb_env_sync(MDB_env *env, int force);
+LMDB_EXPORT int  mdb_env_sync(MDB_env *env, int force);
 
 	/** @brief Close the environment and release the memory map.
 	 *
@@ -790,7 +812,7 @@
 	 * The environment handle will be freed and must not be used again after this call.
 	 * @param[in] env An environment handle returned by #mdb_env_create()
 	 */
-void mdb_env_close(MDB_env *env);
+LMDB_EXPORT void mdb_env_close(MDB_env *env);
 
 	/** @brief Set environment flags.
 	 *
@@ -806,7 +828,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_env_set_flags(MDB_env *env, unsigned int flags, int onoff);
+LMDB_EXPORT int  mdb_env_set_flags(MDB_env *env, unsigned int flags, int onoff);
 
 	/** @brief Get environment flags.
 	 *
@@ -818,7 +840,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_env_get_flags(MDB_env *env, unsigned int *flags);
+LMDB_EXPORT int  mdb_env_get_flags(MDB_env *env, unsigned int *flags);
 
 	/** @brief Return the path that was used in #mdb_env_open().
 	 *
@@ -832,7 +854,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_env_get_path(MDB_env *env, const char **path);
+LMDB_EXPORT int  mdb_env_get_path(MDB_env *env, const char **path);
 
 	/** @brief Return the filedescriptor for the given environment.
 	 *
@@ -848,7 +870,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_env_get_fd(MDB_env *env, mdb_filehandle_t *fd);
+LMDB_EXPORT int  mdb_env_get_fd(MDB_env *env, mdb_filehandle_t *fd);
 
 	/** @brief Set the size of the memory map to use for this environment.
 	 *
@@ -882,7 +904,7 @@
 	 *   	an active write transaction.
 	 * </ul>
 	 */
-int  mdb_env_set_mapsize(MDB_env *env, mdb_size_t size);
+LMDB_EXPORT int  mdb_env_set_mapsize(MDB_env *env, mdb_size_t size);
 
 	/** @brief Set the maximum number of threads/reader slots for the environment.
 	 *
@@ -901,7 +923,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified, or the environment is already open.
 	 * </ul>
 	 */
-int  mdb_env_set_maxreaders(MDB_env *env, unsigned int readers);
+LMDB_EXPORT int  mdb_env_set_maxreaders(MDB_env *env, unsigned int readers);
 
 	/** @brief Get the maximum number of threads/reader slots for the environment.
 	 *
@@ -913,7 +935,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_env_get_maxreaders(MDB_env *env, unsigned int *readers);
+LMDB_EXPORT int  mdb_env_get_maxreaders(MDB_env *env, unsigned int *readers);
 
 	/** @brief Set the maximum number of named databases for the environment.
 	 *
@@ -933,7 +955,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified, or the environment is already open.
 	 * </ul>
 	 */
-int  mdb_env_set_maxdbs(MDB_env *env, MDB_dbi dbs);
+LMDB_EXPORT int  mdb_env_set_maxdbs(MDB_env *env, MDB_dbi dbs);
 
 	/** @brief Get the maximum size of keys and #MDB_DUPSORT data we can write.
 	 *
@@ -942,7 +964,7 @@
 	 * @param[in] env An environment handle returned by #mdb_env_create()
 	 * @return The maximum size of a key we can write
 	 */
-int  mdb_env_get_maxkeysize(MDB_env *env);
+LMDB_EXPORT int  mdb_env_get_maxkeysize(MDB_env *env);
 
 	/** @brief Set application information associated with the #MDB_env.
 	 *
@@ -950,14 +972,14 @@
 	 * @param[in] ctx An arbitrary pointer for whatever the application needs.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_set_userctx(MDB_env *env, void *ctx);
+LMDB_EXPORT int  mdb_env_set_userctx(MDB_env *env, void *ctx);
 
 	/** @brief Get the application information associated with the #MDB_env.
 	 *
 	 * @param[in] env An environment handle returned by #mdb_env_create()
 	 * @return The pointer set by #mdb_env_set_userctx().
 	 */
-void *mdb_env_get_userctx(MDB_env *env);
+LMDB_EXPORT void *mdb_env_get_userctx(MDB_env *env);
 
 	/** @brief A callback function for most LMDB assert() failures,
 	 * called before printing the message and aborting.
@@ -974,7 +996,7 @@
 	 * @param[in] func An #MDB_assert_func function, or 0.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_env_set_assert(MDB_env *env, MDB_assert_func *func);
+LMDB_EXPORT int  mdb_env_set_assert(MDB_env *env, MDB_assert_func *func);
 
 	/** @brief Create a transaction for use with the environment.
 	 *
@@ -1014,13 +1036,13 @@
 	 *	<li>ENOMEM - out of memory.
 	 * </ul>
 	 */
-int  mdb_txn_begin(MDB_env *env, MDB_txn *parent, unsigned int flags, MDB_txn **txn);
+LMDB_EXPORT int  mdb_txn_begin(MDB_env *env, MDB_txn *parent, unsigned int flags, MDB_txn **txn);
 
 	/** @brief Returns the transaction's #MDB_env
 	 *
 	 * @param[in] txn A transaction handle returned by #mdb_txn_begin()
 	 */
-MDB_env *mdb_txn_env(MDB_txn *txn);
+LMDB_EXPORT MDB_env *mdb_txn_env(MDB_txn *txn);
 
 	/** @brief Return the transaction's ID.
 	 *
@@ -1031,7 +1053,7 @@
 	 * @param[in] txn A transaction handle returned by #mdb_txn_begin()
 	 * @return A transaction ID, valid if input is an active transaction.
 	 */
-mdb_size_t mdb_txn_id(MDB_txn *txn);
+LMDB_EXPORT mdb_size_t mdb_txn_id(MDB_txn *txn);
 
 	/** @brief Commit all the operations of a transaction into the database.
 	 *
@@ -1049,7 +1071,7 @@
 	 *	<li>ENOMEM - out of memory.
 	 * </ul>
 	 */
-int  mdb_txn_commit(MDB_txn *txn);
+LMDB_EXPORT int  mdb_txn_commit(MDB_txn *txn);
 
 	/** @brief Abandon all the operations of the transaction instead of saving them.
 	 *
@@ -1059,7 +1081,7 @@
 	 * Only write-transactions free cursors.
 	 * @param[in] txn A transaction handle returned by #mdb_txn_begin()
 	 */
-void mdb_txn_abort(MDB_txn *txn);
+LMDB_EXPORT void mdb_txn_abort(MDB_txn *txn);
 
 	/** @brief Reset a read-only transaction.
 	 *
@@ -1078,7 +1100,7 @@
 	 * the database size may grow much more rapidly than otherwise.
 	 * @param[in] txn A transaction handle returned by #mdb_txn_begin()
 	 */
-void mdb_txn_reset(MDB_txn *txn);
+LMDB_EXPORT void mdb_txn_reset(MDB_txn *txn);
 
 	/** @brief Renew a read-only transaction.
 	 *
@@ -1094,7 +1116,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_txn_renew(MDB_txn *txn);
+LMDB_EXPORT int  mdb_txn_renew(MDB_txn *txn);
 
 /** Compat with version <= 0.9.4, avoid clash with libmdb from MDB Tools project */
 #define mdb_open(txn,name,flags,dbi)	mdb_dbi_open(txn,name,flags,dbi)
@@ -1170,7 +1192,7 @@
 	 *	<li>#MDB_DBS_FULL - too many databases have been opened. See #mdb_env_set_maxdbs().
 	 * </ul>
 	 */
-int  mdb_dbi_open(MDB_txn *txn, const char *name, unsigned int flags, MDB_dbi *dbi);
+LMDB_EXPORT int  mdb_dbi_open(MDB_txn *txn, const char *name, unsigned int flags, MDB_dbi *dbi);
 
 	/** @brief Retrieve statistics for a database.
 	 *
@@ -1184,7 +1206,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_stat(MDB_txn *txn, MDB_dbi dbi, MDB_stat *stat);
+LMDB_EXPORT int  mdb_stat(MDB_txn *txn, MDB_dbi dbi, MDB_stat *stat);
 
 	/** @brief Retrieve the DB flags for a database handle.
 	 *
@@ -1193,7 +1215,7 @@
 	 * @param[out] flags Address where the flags will be returned.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int mdb_dbi_flags(MDB_txn *txn, MDB_dbi dbi, unsigned int *flags);
+LMDB_EXPORT int mdb_dbi_flags(MDB_txn *txn, MDB_dbi dbi, unsigned int *flags);
 
 	/** @brief Close a database handle. Normally unnecessary. Use with care:
 	 *
@@ -1211,7 +1233,7 @@
 	 * @param[in] env An environment handle returned by #mdb_env_create()
 	 * @param[in] dbi A database handle returned by #mdb_dbi_open()
 	 */
-void mdb_dbi_close(MDB_env *env, MDB_dbi dbi);
+LMDB_EXPORT void mdb_dbi_close(MDB_env *env, MDB_dbi dbi);
 
 	/** @brief Empty or delete+close a database.
 	 *
@@ -1222,7 +1244,7 @@
 	 * environment and close the DB handle.
 	 * @return A non-zero error value on failure and 0 on success.
 	 */
-int  mdb_drop(MDB_txn *txn, MDB_dbi dbi, int del);
+LMDB_EXPORT int  mdb_drop(MDB_txn *txn, MDB_dbi dbi, int del);
 
 	/** @brief Set a custom key comparison function for a database.
 	 *
@@ -1243,7 +1265,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_set_compare(MDB_txn *txn, MDB_dbi dbi, MDB_cmp_func *cmp);
+LMDB_EXPORT int  mdb_set_compare(MDB_txn *txn, MDB_dbi dbi, MDB_cmp_func *cmp);
 
 	/** @brief Set a custom data comparison function for a #MDB_DUPSORT database.
 	 *
@@ -1266,7 +1288,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_set_dupsort(MDB_txn *txn, MDB_dbi dbi, MDB_cmp_func *cmp);
+LMDB_EXPORT int  mdb_set_dupsort(MDB_txn *txn, MDB_dbi dbi, MDB_cmp_func *cmp);
 
 	/** @brief Set a relocation function for a #MDB_FIXEDMAP database.
 	 *
@@ -1286,7 +1308,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_set_relfunc(MDB_txn *txn, MDB_dbi dbi, MDB_rel_func *rel);
+LMDB_EXPORT int  mdb_set_relfunc(MDB_txn *txn, MDB_dbi dbi, MDB_rel_func *rel);
 
 	/** @brief Set a context pointer for a #MDB_FIXEDMAP database's relocation function.
 	 *
@@ -1302,7 +1324,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_set_relctx(MDB_txn *txn, MDB_dbi dbi, void *ctx);
+LMDB_EXPORT int  mdb_set_relctx(MDB_txn *txn, MDB_dbi dbi, void *ctx);
 
 	/** @brief Get items from a database.
 	 *
@@ -1330,7 +1352,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_get(MDB_txn *txn, MDB_dbi dbi, MDB_val *key, MDB_val *data);
+LMDB_EXPORT int  mdb_get(MDB_txn *txn, MDB_dbi dbi, MDB_val *key, MDB_val *data);
 
 	/** @brief Store items into a database.
 	 *
@@ -1379,7 +1401,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_put(MDB_txn *txn, MDB_dbi dbi, MDB_val *key, MDB_val *data,
+LMDB_EXPORT int  mdb_put(MDB_txn *txn, MDB_dbi dbi, MDB_val *key, MDB_val *data,
 			    unsigned int flags);
 
 	/** @brief Delete items from a database.
@@ -1404,7 +1426,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_del(MDB_txn *txn, MDB_dbi dbi, MDB_val *key, MDB_val *data);
+LMDB_EXPORT int  mdb_del(MDB_txn *txn, MDB_dbi dbi, MDB_val *key, MDB_val *data);
 
 	/** @brief Create a cursor handle.
 	 *
@@ -1428,7 +1450,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_cursor_open(MDB_txn *txn, MDB_dbi dbi, MDB_cursor **cursor);
+LMDB_EXPORT int  mdb_cursor_open(MDB_txn *txn, MDB_dbi dbi, MDB_cursor **cursor);
 
 	/** @brief Close a cursor handle.
 	 *
@@ -1436,7 +1458,7 @@
 	 * Its transaction must still be live if it is a write-transaction.
 	 * @param[in] cursor A cursor handle returned by #mdb_cursor_open()
 	 */
-void mdb_cursor_close(MDB_cursor *cursor);
+LMDB_EXPORT void mdb_cursor_close(MDB_cursor *cursor);
 
 	/** @brief Renew a cursor handle.
 	 *
@@ -1454,19 +1476,19 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_cursor_renew(MDB_txn *txn, MDB_cursor *cursor);
+LMDB_EXPORT int  mdb_cursor_renew(MDB_txn *txn, MDB_cursor *cursor);
 
 	/** @brief Return the cursor's transaction handle.
 	 *
 	 * @param[in] cursor A cursor handle returned by #mdb_cursor_open()
 	 */
-MDB_txn *mdb_cursor_txn(MDB_cursor *cursor);
+LMDB_EXPORT MDB_txn *mdb_cursor_txn(MDB_cursor *cursor);
 
 	/** @brief Return the cursor's database handle.
 	 *
 	 * @param[in] cursor A cursor handle returned by #mdb_cursor_open()
 	 */
-MDB_dbi mdb_cursor_dbi(MDB_cursor *cursor);
+LMDB_EXPORT MDB_dbi mdb_cursor_dbi(MDB_cursor *cursor);
 
 	/** @brief Retrieve by cursor.
 	 *
@@ -1487,7 +1509,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_cursor_get(MDB_cursor *cursor, MDB_val *key, MDB_val *data,
+LMDB_EXPORT int  mdb_cursor_get(MDB_cursor *cursor, MDB_val *key, MDB_val *data,
 			    MDB_cursor_op op);
 
 	/** @brief Store by cursor.
@@ -1549,7 +1571,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_cursor_put(MDB_cursor *cursor, MDB_val *key, MDB_val *data,
+LMDB_EXPORT int  mdb_cursor_put(MDB_cursor *cursor, MDB_val *key, MDB_val *data,
 				unsigned int flags);
 
 	/** @brief Delete current key/data pair
@@ -1573,7 +1595,7 @@
 	 *	<li>EINVAL - an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_cursor_del(MDB_cursor *cursor, unsigned int flags);
+LMDB_EXPORT int  mdb_cursor_del(MDB_cursor *cursor, unsigned int flags);
 
 	/** @brief Return count of duplicates for current key.
 	 *
@@ -1587,7 +1609,7 @@
 	 *	<li>EINVAL - cursor is not initialized, or an invalid parameter was specified.
 	 * </ul>
 	 */
-int  mdb_cursor_count(MDB_cursor *cursor, mdb_size_t *countp);
+LMDB_EXPORT int  mdb_cursor_count(MDB_cursor *cursor, mdb_size_t *countp);
 
 	/** @brief Compare two data items according to a particular database.
 	 *
@@ -1599,7 +1621,7 @@
 	 * @param[in] b The second item to compare
 	 * @return < 0 if a < b, 0 if a == b, > 0 if a > b
 	 */
-int  mdb_cmp(MDB_txn *txn, MDB_dbi dbi, const MDB_val *a, const MDB_val *b);
+LMDB_EXPORT int  mdb_cmp(MDB_txn *txn, MDB_dbi dbi, const MDB_val *a, const MDB_val *b);
 
 	/** @brief Compare two data items according to a particular database.
 	 *
@@ -1611,7 +1633,7 @@
 	 * @param[in] b The second item to compare
 	 * @return < 0 if a < b, 0 if a == b, > 0 if a > b
 	 */
-int  mdb_dcmp(MDB_txn *txn, MDB_dbi dbi, const MDB_val *a, const MDB_val *b);
+LMDB_EXPORT int  mdb_dcmp(MDB_txn *txn, MDB_dbi dbi, const MDB_val *a, const MDB_val *b);
 
 	/** @brief A callback function used to print a message from the library.
 	 *
@@ -1628,7 +1650,7 @@
 	 * @param[in] ctx Anything the message function needs
 	 * @return < 0 on failure, >= 0 on success.
 	 */
-int	mdb_reader_list(MDB_env *env, MDB_msg_func *func, void *ctx);
+LMDB_EXPORT int	mdb_reader_list(MDB_env *env, MDB_msg_func *func, void *ctx);
 
 	/** @brief Check for stale entries in the reader lock table.
 	 *
@@ -1636,7 +1658,7 @@
 	 * @param[out] dead Number of stale slots that were cleared
 	 * @return 0 on success, non-zero on failure.
 	 */
-int	mdb_reader_check(MDB_env *env, int *dead);
+LMDB_EXPORT int	mdb_reader_check(MDB_env *env, int *dead);
 /**	@} */
 
 #ifdef __cplusplus
diff -Naur lmdb.orig/mdb.c lmdb/mdb.c
--- lmdb.orig/mdb.c	2023-09-11 11:46:05.743363431 -0400
+++ lmdb/mdb.c	2023-09-11 11:48:19.953119455 -0400
@@ -7946,7 +7946,7 @@
 						 * Copy end of page, adjusting alignment so
 						 * compiler may copy words instead of bytes.
 						 */
-						off = (PAGEHDRSZ + data->mv_size) & -(int)sizeof(size_t);
+						off = (PAGEHDRSZ + data->mv_size) & -sizeof(size_t);
 						memcpy((size_t *)((char *)np + off),
 							(size_t *)((char *)omp + off), sz - off);
 						sz = PAGEHDRSZ;
