# Unless we have ENABLE_ALL set, based the building of lmdb on
# the system detection results
if (ENABLE_ALL AND NOT DEFINED ENABLE_LMDB)
  set(ENABLE_LMDB ON)
endif (ENABLE_ALL AND NOT DEFINED ENABLE_LMDB)

if (NOT ENABLE_LMDB)

  find_package(LMDB)

  if (NOT LMDB_FOUND AND NOT DEFINED ENABLE_LMDB)
    set(ENABLE_LMDB "ON" CACHE BOOL "Enable lmdb build")
  endif (NOT LMDB_FOUND AND NOT DEFINED ENABLE_LMDB)

endif (NOT ENABLE_LMDB)
set(ENABLE_LMDB "${ENABLE_LMDB}" CACHE BOOL "Enable lmdb build")

if (ENABLE_LMDB)

    ExternalProject_Add(LMDB_BLD
    URL "${CMAKE_CURRENT_SOURCE_DIR}/lmdb"
    BUILD_ALWAYS ${EXT_BUILD_ALWAYS} ${LOG_OPTS}
    PATCH_COMMAND ${PATCH_EXECUTABLE};-E;-p1;${PATCH_OPTIONS};-i;${CMAKE_CURRENT_SOURCE_DIR}/lmdb.patch
    CMAKE_ARGS
    ${BUILD_TYPE_SPECIFIER}
    -DBIN_DIR=${BIN_DIR}
    -DLIB_DIR=${LIB_DIR}
    -DBUILD_STATIC_LIBS=${BUILD_STATIC_LIBS}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_INSTALL_PREFIX=${CMAKE_BUNDLE_INSTALL_PREFIX}
    -DZ_PREFIX_STR=${Z_PREFIX_STR}
    LOG_CONFIGURE ${EXT_BUILD_QUIET}
    LOG_BUILD ${EXT_BUILD_QUIET}
    LOG_INSTALL ${EXT_BUILD_QUIET}
    LOG_OUTPUT_ON_FAILURE ${EXT_BUILD_QUIET}
    STEP_TARGETS install
    )

  if (TARGET PATCH_BLD)
    ExternalProject_Add_StepDependencies(LMDB_BLD configure PATCH_BLD-install)
  endif (TARGET PATCH_BLD)

endif (ENABLE_LMDB)

# Copy the license into position in CMAKE_BUNDLE_INSTALL_PREFIX
file(READ ${CMAKE_CURRENT_SOURCE_DIR}/lmdb/COPYRIGHT LMDB_COPYRIGHT)
file(READ ${CMAKE_CURRENT_SOURCE_DIR}/lmdb/LICENSE LMDB_LICENSE)
file(MAKE_DIRECTORY ${CMAKE_BUNDLE_INSTALL_PREFIX}/doc/legal/other)
file(WRITE ${CMAKE_BUNDLE_INSTALL_PREFIX}/doc/legal/other/lmdb.txt "${LMDB_COPYRIGHT}")
file(APPEND ${CMAKE_BUNDLE_INSTALL_PREFIX}/doc/legal/other/lmdb.txt "\n")
file(APPEND ${CMAKE_BUNDLE_INSTALL_PREFIX}/doc/legal/other/lmdb.txt "${LMDB_LICENSE}")

# Local Variables:
# tab-width: 8
# mode: cmake
# indent-tabs-mode: t
# End:
# ex: shiftwidth=2 tabstop=8

