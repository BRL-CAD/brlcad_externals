#include <cstdio>
#include <fstream>
#include <iostream>
#include <regex>
#include <string>
#include <vector>

static const char *sep = "/";
static const char *CMAKE_INSTALL_PREFIX = "@CMAKE_INSTALL_PREFIX@";
static const char *LIB_DIR = "@LIB_DIR@";
static const char *BIN_DIR = "@BIN_DIR@";
static const char *INCLUDE_DIR = "@INCLUDE_DIR@";
static const char *MAN_DIR = "@MAN_DIR@";
static const char *PKG_DIR = "tcl8.@TCL_MINOR_VERSION@";
static const char *TKTABLE_RUNTIME_DIR = "Tktable@TKTABLE_VERSION@";

static const char *ZLIB_NAME = "@ZLIB_NAME@";
static const char *DEFLATE_NAME = "@DEFLATE_NAME@";

int main(int argc, const char **argv)
{
    int verbose = 1;
    if (argc < 2) {
	std::cerr << "Error: no file specified for processing or missing RPATH to set.\n";
	return -1;
    }

    std::vector<std::regex> regexes;
    std::vector<std::string> strings;

    std::regex tcllib_regex("sizeof[(]TCL_LIBRARY[)]");
    regexes.push_back(tcllib_regex);
    std::string tcllib_new  = std::string("sizeof(\"") + std::string(CMAKE_INSTALL_PREFIX) + std::string(sep) + std::string(LIB_DIR) + std::string("\")");
    strings.push_back(tcllib_new);

    std::regex tcllib2_regex("= TCL_LIBRARY;");
    regexes.push_back(tcllib2_regex);
    std::string tcllib2_new  = std::string("= \"") + std::string(CMAKE_INSTALL_PREFIX) + std::string(sep) + std::string(LIB_DIR) + std::string("\";");
    strings.push_back(tcllib2_new);

    std::regex dylib_dir_regex("[$][{]DYLIB_INSTALL_DIR[}]");
    regexes.push_back(dylib_dir_regex);
    std::string dylib_dir_new  = std::string("@rpath");
    strings.push_back(dylib_dir_new);

    std::regex zname_regex("for ac_lib in z");
    regexes.push_back(zname_regex);
    std::string zname_new  = std::string("for ac_lib in ") + std::string(ZLIB_NAME);
    strings.push_back(zname_new);

    std::regex deflate_regex("deflateSetHeader");
    regexes.push_back(deflate_regex);
    std::string deflate_new  = std::string(DEFLATE_NAME);
    strings.push_back(deflate_new);

    for (int i = 1; i < argc; i++) {
	std::string cline;
	std::string nfile_contents;
	std::ifstream fs;
	fs.open(argv[i]);
	if (!fs.is_open()) {
	    std::cerr << "Error: file " << argv[i] << " could not be opened.\n";
	    return -1;
	} else {
	    if (verbose) {
		std::cerr << "Patching " << argv[i] << "\n";
	    }
	}

	while (std::getline(fs, cline)) {
	    std::string nline = cline;
	    for (size_t j = 0; j < regexes.size(); j++) {
		if (strings[j].length() > 0) {
		    std::string nline2 = std::regex_replace(nline, regexes[j], strings[j]);
		    nline = nline2;
		}
	    }
	    nfile_contents.append(nline);
	    nfile_contents.append("\n");
	    if (nline != cline) {
		if (verbose > 1) {
		    std::cerr << "   Changed line: " << cline << " -> " << nline << "\n";
		}
	    }
	}

	fs.close();

	std::ofstream ofs(argv[i], std::ios::trunc);
	ofs << nfile_contents;
	ofs.close();
    }
}

// Local Variables:
// tab-width: 8
// mode: C++
// c-basic-offset: 4
// indent-tabs-mode: t
// c-file-style: "stroustrup"
// End:
// ex: shiftwidth=4 tabstop=8

