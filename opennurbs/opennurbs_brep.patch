--- opennurbs/opennurbs_brep.h	2023-09-09 13:52:46.157646417 -0400
+++ openNURBS/opennurbs_brep.h	2023-09-09 13:43:33.712976340 -0400
@@ -4092,6 +4092,7 @@
         );
 
   // helpers for validation checking
+public:
   bool IsValidTrim(int trim_index,ON_TextLog* text_log) const;
   bool IsValidTrimTopology(int trim_index,ON_TextLog* text_log) const;
   bool IsValidTrimGeometry(int trim_index,ON_TextLog* text_log) const;
@@ -4117,6 +4118,7 @@
   bool IsValidVertexGeometry(int vertex_index,ON_TextLog* text_log) const;
   bool IsValidVertexTolerancesAndFlags(int vertex_index,ON_TextLog* text_log) const;
 
+protected:
   void SetTolsFromLegacyValues();
 
   // read helpers to support various versions
--- opennurbs/opennurbs_brep.cpp	2023-09-09 13:52:46.157646417 -0400
+++ openNURBS/opennurbs_brep.cpp	2023-09-09 13:43:33.712976340 -0400
@@ -3464,6 +3464,10 @@
     }   
   }
 
+  // BRL-CAD uses this for a tolerance check below
+  const ON_Surface *surf = loop.Face()->SurfaceOf();
+  double urange = (surf) ? (surf->Domain(0)[1] - surf->Domain(0)[0]) : DBL_MAX;
+  double vrange = (surf) ? (surf->Domain(1)[1] - surf->Domain(1)[0]) : DBL_MAX;
 
   // make sure ends of trims jibe
   int ci0, ci1, next_lti;
@@ -3492,6 +3496,12 @@
       //    didn't get flagged as bad.
       double xtol = (fabs(P0.x) + fabs(P1.x))*1.0e-10;
       double ytol = (fabs(P0.y) + fabs(P1.y))*1.0e-10;
+
+      // Oct 12 2009 Rather than using the above check, BRL-CAD uses
+      // relative uv size if it is available
+      xtol = (urange < DBL_MAX) ? urange * trim0.m_tolerance[0] : xtol;
+      ytol = (vrange < DBL_MAX) ? vrange * trim0.m_tolerance[1] : ytol;
+
       if ( xtol < ON_ZERO_TOLERANCE )
         xtol = ON_ZERO_TOLERANCE;
       if ( ytol < ON_ZERO_TOLERANCE )
